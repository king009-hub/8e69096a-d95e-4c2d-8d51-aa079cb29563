import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Sale, SaleItem } from "@/types/inventory";
import { useToast } from "@/components/ui/use-toast";

export function useSales() {
  const [sales, setSales] = useState<Sale[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  const fetchSales = async () => {
    try {
      const { data, error } = await supabase
        .from('sales')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setSales(data || []);
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to fetch sales",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const createSale = async (
    saleData: Omit<Sale, 'id' | 'sale_number' | 'created_at'>,
    items: Omit<SaleItem, 'id' | 'sale_id' | 'created_at'>[]
  ) => {
    try {
      // Create the sale (sale_number will be auto-generated by trigger)
      const { data: sale, error: saleError } = await supabase
        .from('sales')
        .insert([{ ...saleData, sale_number: '' }])
        .select()
        .single();

      if (saleError) throw saleError;

      // Create sale items
      const saleItems = items.map(item => ({
        ...item,
        sale_id: sale.id,
      }));

      const { error: itemsError } = await supabase
        .from('sale_items')
        .insert(saleItems);

      if (itemsError) throw itemsError;

      setSales(prev => [sale, ...prev]);
      toast({
        title: "Success",
        description: `Sale ${sale.sale_number} created successfully`,
      });
      
      return sale;
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to create sale",
        variant: "destructive",
      });
      throw error;
    }
  };

  const getSaleItems = async (saleId: string) => {
    try {
      const { data, error } = await supabase
        .from('sale_items')
        .select(`
          *,
          product:products(*)
        `)
        .eq('sale_id', saleId);

      if (error) throw error;
      return data;
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to fetch sale items",
        variant: "destructive",
      });
      throw error;
    }
  };

  useEffect(() => {
    fetchSales();
  }, []);

  return {
    sales,
    loading,
    createSale,
    getSaleItems,
    refreshSales: fetchSales,
  };
}